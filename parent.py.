#!/usr/bin/python
#импоритируем необходимые для работы библиотеки 
import os
import sys
import random

# создаём функцию для работы с дочерним процессом
def run_children():
# создаём дочерний процесс
    child = os.fork()
    # у нас есть теперь 2 процесса, один из которых исходный родительский, а другой - новый, созданный. 
    # у процесса-родителя в переменной child лежит pid созданного нового процесса, у дочернего лежит 0.
    # поэтому мы должны осуществить проверку, если pid=0, значит, перед нами дочерний процесс и надо заменить код, который выполняется сейчас на код дочернего.
    if child == 0:
    # для замены используем данную функцию
        argument = str(random.randint(5, 10))
        # ./child.py указывает, какой именно участок кода нужно запустить, второй аргумент - отображение в диспетчере задач, следующие 
        # аргументы должны быть обязательно строками, поэтому делаем преобразование типа с помощью randint()
        os.execl("./child.py", "child.py", argument)
        # выводим необходимое информационное сообщение
    print(f"Parent [{os.getpid()}]: I ran children process with PID {child}")

# узнаем количество созданных дочерних процессов
num_children = sys.argv[1]
# приводим к целочисленному типу с помощью явного привидения 
num_children = int(num_children)
# с помощью цикла приводим в работу необходимое количество дочерних процессов
for i in range(0, num_children):
    run_children()
# теперь у всех дочерних процессов надо считать коды завершения, и, если нужно, запустить новые дочерние процессы. 
# за num_children обозначим количество ожидаемых детей, если статус завершения дочернего процесса=0,счётчик уменьшаетя, если не равен 0, то запускаем новый дочерний процесс
while num_children > 0:
# вызваем os.wait(), если хотим дождаться завершения какого-либо дочернего процесса, получим pid и status
    child_pid, status = os.wait()
    # статус будет всегда больше ожидаемого в 256 раз, поэтому нужно разделить полученное число на 256
    status = status / 256
    # явно приводим к нужному типу, так как получаем double, а нам нужен int 
    status = int(status)
    # выводим необходимое информационное сообщение
    print(f"Parent[{os.getpid()}]: Child with PID {child_pid} terminated. Exit Status {status}.")
    if status == 0:
        num_children = num_children - 1
    else:
        run_children()
